#version 450

#include "..\shaderCommon.h"

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = UNIFORM_BUFFER_SLOT(0)) uniform UBO
{
	uint horizontal;
} ubo;

layout (binding = STORAGE_IMAGE_SLOT(0), rgba8) uniform readonly image2D inputImage;
layout (binding = STORAGE_IMAGE_SLOT(1), rgba8) uniform image2D resultImage;

void main()
{
#if 1
	const float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);
	const float weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,
                                  0.0540540541, 0.0162162162);

	vec4 result = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy)) * weight[0];

	if (ubo.horizontal > 0)
	{
		for (int i = 1; i < 5; ++i)
		{
			result += imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy) + ivec2(offset[i], 0)) * weight[i];
			result += imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy) - ivec2(offset[i], 0)) * weight[i];
		}
	}
	else
	{
		for (int i = 1; i < 5; ++i)
		{
			result += imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy) + ivec2(0, offset[i])) * weight[i];
			result += imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy) - ivec2(0, offset[i])) * weight[i];
		}
	}
	
#else
	vec4 result = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy));
#endif
	
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), result);
}
