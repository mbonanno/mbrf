// first implementation base on this series: https://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive/

#version 450

#include "..\shaderCommon.h"

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = UNIFORM_BUFFER_SLOT(0)) uniform UBO
{
	vec2 resolution;
	int numFrameTest;
} ubo;

layout(set = 0, binding = TEXTURE_SLOT(0)) uniform samplerCube cubemap;
layout (binding = STORAGE_IMAGE_SLOT(0), rgba8) uniform image2D outputImage;


// The minimunm distance a ray must travel before we consider an intersection.
// This is to prevent a ray from intersecting a surface it just bounced off of.
const float c_minimumRayHitTime = 0.01f;

// after a hit, it moves the ray this far along the normal away from a surface.
// Helps prevent incorrect intersections when rays bounce off of objects.
const float c_rayPosNormalNudge = 0.01f;

// the farthest we look for ray hits
const float c_superFar = 10000.0f;

// camera FOV
const float c_FOVDegrees = 90.0f;

// number of ray bounces allowed
const int c_numBounces = 8;

// how many renders per frame - to get around the vsync limitation.
const int c_numRendersPerFrame = 50;

const float c_pi = 3.14159265359f;
const float c_twopi = 2.0f * c_pi;

struct SMaterialInfo
{
    // Note: diffuse chance is 1.0f - (specularChance+refractionChance)
    vec3  albedo;              // the color used for diffuse lighting
    vec3  emissive;            // how much the surface glows
    float specularChance;      // percentage chance of doing a specular reflection
    float specularRoughness;   // how rough the specular reflections are
    vec3  specularColor;       // the color tint of specular reflections
    float IOR;                 // index of refraction. used by fresnel and refraction.
    float refractionChance;    // percent chance of doing a refractive transmission
    float refractionRoughness; // how rough the refractive transmissions are
    vec3  refractionColor;     // absorption for beer's law    
};

SMaterialInfo GetZeroedMaterial()
{
    SMaterialInfo ret;
    ret.albedo = vec3(0.0f, 0.0f, 0.0f);
    ret.emissive = vec3(0.0f, 0.0f, 0.0f);
    ret.specularChance = 0.0f;
    ret.specularRoughness = 0.0f;
    ret.specularColor = vec3(0.0f, 0.0f, 0.0f);
    ret.IOR = 1.0f;
    ret.refractionChance = 0.0f;
    ret.refractionRoughness = 0.0f;
    ret.refractionColor = vec3(0.0f, 0.0f, 0.0f);
    return ret;
}
 
struct SRayHitInfo
{
	bool fromInside;
    float dist;
    vec3 normal;
	SMaterialInfo material;
};
 
float ScalarTriple(vec3 u, vec3 v, vec3 w)
{
    return dot(cross(u, v), w);
}

uint wang_hash(inout uint seed)
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint state)
{
    return float(wang_hash(state)) / 4294967296.0;
}
 
vec3 RandomUnitVector(inout uint state)
{
    float z = RandomFloat01(state) * 2.0f - 1.0f;
    float a = RandomFloat01(state) * c_twopi;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

// n1: "index of refraction" of the material the ray started in (air, and we are going to use 1.0).
// n2: "index of refraction" of the material of the object being hit. 
// normal: normal of the surface where the ray hit. 
// incident: ray direction when it hit the object. 
// f0: minimum reflection of the object (when the ray and normal are 0 degrees apart)
// f90: maximum reflection of the object (when the ray and normal are 90 degrees apart).
float FresnelReflectAmount(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90)
{
        // Schlick aproximation
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        if (n1 > n2)
        {
            float n = n1/n2;
            float sinT2 = n*n*(1.0-cosX*cosX);
            // Total internal reflection
            if (sinT2 > 1.0)
                return f90;
            cosX = sqrt(1.0-sinT2);
        }
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;
 
        // adjust reflect multiplier for object reflectivity
        return mix(f0, f90, ret);
}

bool TestQuadTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo info, in vec3 a, in vec3 b, in vec3 c, in vec3 d)
{
	info.fromInside = false;

    // calculate normal and flip vertices order if needed
    vec3 normal = normalize(cross(c-a, c-b));
    if (dot(normal, rayDir) > 0.0f)
    {
        normal *= -1.0f;
        
		vec3 temp = d;
        d = a;
        a = temp;
        
        temp = b;
        b = c;
        c = temp;
    }
    
    vec3 p = rayPos;
    vec3 q = rayPos + rayDir;
    vec3 pq = q - p;
    vec3 pa = a - p;
    vec3 pb = b - p;
    vec3 pc = c - p;
    
    // determine which triangle to test against by testing against diagonal first
    vec3 m = cross(pc, pq);
    float v = dot(pa, m);
    vec3 intersectPos;
    if (v >= 0.0f)
    {
        // test against triangle a,b,c
        float u = -dot(pb, m);
        if (u < 0.0f) return false;
        float w = ScalarTriple(pq, pb, pa);
        if (w < 0.0f) return false;
        float denom = 1.0f / (u+v+w);
        u*=denom;
        v*=denom;
        w*=denom;
        intersectPos = u*a+v*b+w*c;
    }
    else
    {
        vec3 pd = d - p;
        float u = dot(pd, m);
        if (u < 0.0f) return false;
        float w = ScalarTriple(pq, pa, pd);
        if (w < 0.0f) return false;
        v = -v;
        float denom = 1.0f / (u+v+w);
        u*=denom;
        v*=denom;
        w*=denom;
        intersectPos = u*a+v*d+w*c;
    }
    
    float dist;
    if (abs(rayDir.x) > 0.1f)
    {
        dist = (intersectPos.x - rayPos.x) / rayDir.x;
    }
    else if (abs(rayDir.y) > 0.1f)
    {
        dist = (intersectPos.y - rayPos.y) / rayDir.y;
    }
    else
    {
        dist = (intersectPos.z - rayPos.z) / rayDir.z;
    }
    
	if (dist > c_minimumRayHitTime && dist < info.dist)
    {
        info.dist = dist;        
        info.normal = normal;        
        return true;
    }    
    
    return false;
}

bool TestSphereTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo info, in vec4 sphere)
{
	//get the vector from the center of this sphere to where the ray begins.
	vec3 m = rayPos - sphere.xyz;

    //get the dot product of the above vector and the ray's vector
	float b = dot(m, rayDir);

	float c = dot(m, m) - sphere.w * sphere.w;

	//exit if r's origin outside s (c > 0) and r pointing away from s (b > 0)
	if(c > 0.0 && b > 0.0)
		return false;

	//calculate discriminant
	float discr = b * b - c;

	//a negative discriminant corresponds to ray missing sphere
	if(discr < 0.0)
		return false;
    
	//ray now found to intersect sphere, compute smallest t value of intersection
    bool fromInside = false;
	float dist = -b - sqrt(discr);
    if (dist < 0.0f)
    {
        fromInside = true;
        dist = -b + sqrt(discr);
    }

	info.fromInside = fromInside;
    
	if (dist > c_minimumRayHitTime && dist < info.dist)
    {
        info.dist = dist;        
        info.normal = normalize((rayPos+rayDir*dist) - sphere.xyz) * (fromInside ? -1.0f : 1.0f);
        return true;
    }
    
    return false;
}

void TestSceneTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo hitInfo)
{    
    // to move the scene around, since we can't move the camera yet
    vec3 sceneTranslation = vec3(0.0f, 0.0f, 10.0f);
    vec4 sceneTranslation4 = vec4(sceneTranslation, 0.0f);

	hitInfo.material = GetZeroedMaterial();
    
   	// back wall
   {
       vec3 A = vec3(-12.6f, -12.6f, 25.0f) + sceneTranslation;
       vec3 B = vec3( 12.6f, -12.6f, 25.0f) + sceneTranslation;
       vec3 C = vec3( 12.6f,  12.6f, 25.0f) + sceneTranslation;
       vec3 D = vec3(-12.6f,  12.6f, 25.0f) + sceneTranslation;
       if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))
       {
           hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);
           hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);

		   vec3 hitPos = rayPos + rayDir * hitInfo.dist;
            
            float shade = floor(mod(hitPos.x, 1.0f) * 2.0f);
            hitInfo.material.albedo = vec3(shade, shade, shade);
       }
	}    
   
   // floor
   {
       vec3 A = vec3(-12.6f, -12.45f, 25.0f) + sceneTranslation;
       vec3 B = vec3( 12.6f, -12.45f, 25.0f) + sceneTranslation;
       vec3 C = vec3( 12.6f, -12.45f, 15.0f) + sceneTranslation;
       vec3 D = vec3(-12.6f, -12.45f, 15.0f) + sceneTranslation;
       if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))
       {
           hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);
           hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
       }        
   }
    
    // cieling
    {
        vec3 A = vec3(-12.6f, 12.5f, 25.0f) + sceneTranslation;
        vec3 B = vec3( 12.6f, 12.5f, 25.0f) + sceneTranslation;
        vec3 C = vec3( 12.6f, 12.5f, 15.0f) + sceneTranslation;
        vec3 D = vec3(-12.6f, 12.5f, 15.0f) + sceneTranslation;
        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))
        {
            hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);
            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        }        
    }    
    
    // left wall
    {
        vec3 A = vec3(-12.5f, -12.6f, 25.0f) + sceneTranslation;
        vec3 B = vec3(-12.5f, -12.6f, 15.0f) + sceneTranslation;
        vec3 C = vec3(-12.5f,  12.6f, 15.0f) + sceneTranslation;
        vec3 D = vec3(-12.5f,  12.6f, 25.0f) + sceneTranslation;
        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))
        {
            hitInfo.material.albedo = vec3(0.7f, 0.1f, 0.1f);
            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        }        
    }
    
    // right wall 
    {
        vec3 A = vec3( 12.5f, -12.6f, 25.0f) + sceneTranslation;
        vec3 B = vec3( 12.5f, -12.6f, 15.0f) + sceneTranslation;
        vec3 C = vec3( 12.5f,  12.6f, 15.0f) + sceneTranslation;
        vec3 D = vec3( 12.5f,  12.6f, 25.0f) + sceneTranslation;
        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))
        {
            hitInfo.material.albedo = vec3(0.1f, 0.7f, 0.1f);
            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
        }        
    }    
    
    // light
    {
        vec3 A = vec3(-5.0f, 12.4f,  22.5f) + sceneTranslation;
        vec3 B = vec3( 5.0f, 12.4f,  22.5f) + sceneTranslation;
        vec3 C = vec3( 5.0f, 12.4f,  17.5f) + sceneTranslation;
        vec3 D = vec3(-5.0f, 12.4f,  17.5f) + sceneTranslation;
        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))
        {
            hitInfo.material.albedo = vec3(0.0f, 0.0f, 0.0f);
            hitInfo.material.emissive = vec3(1.0f, 0.9f, 0.7f) * 20.0f;
        }        
    }
    
	if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-9.0f, -9.5f, 20.0f, 3.0f)+sceneTranslation4))
    {
        hitInfo.material.albedo = vec3(0.9f, 0.9f, 0.5);
        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
		hitInfo.material.specularChance = 0.1;
        hitInfo.material.specularRoughness = 0.2;
        hitInfo.material.specularColor = vec3(0.9f, 0.9f, 0.9f);
		hitInfo.material.IOR = 1.0;
    } 
    
	if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(0.0f, -9.5f, 20.0f, 3.0f)+sceneTranslation4))
    {
        hitInfo.material.albedo = vec3(0.9f, 0.5, 0.9f);
        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
		hitInfo.material.specularChance = 0.3;
        hitInfo.material.specularRoughness = 0.2;
        hitInfo.material.specularColor = vec3(0.9f, 0.9f, 0.9f);
		hitInfo.material.IOR = 1.0;
    }    
    
	if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(9.0f, -9.5f, 20.0f, 3.0f)+sceneTranslation4))
    {
        hitInfo.material.albedo = vec3(0.5, 0.9f, 0.9f);
        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);
		hitInfo.material.specularChance = 0.5;
        hitInfo.material.specularRoughness = 0.5;
        hitInfo.material.specularColor = vec3(0.9f, 0.9f, 0.9f);
		hitInfo.material.IOR = 1.0;
    }   
	
	const int c_numSpheres = 6;
    for (int sphereIndex = 0; sphereIndex < c_numSpheres; ++sphereIndex)
    {
		if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-10.0f + 4.0f * float(sphereIndex), 0.0f, 23.0f, 1.5f)+sceneTranslation4))
        {
			float ior = 1.05f + 0.5f * float(sphereIndex) / float(c_numSpheres-1);
			float rr = 0.1f * float(sphereIndex);
			float absorb = 0.1f + float(sphereIndex) / float(c_numSpheres-1);
            
            hitInfo.material = GetZeroedMaterial();
            hitInfo.material.albedo = vec3(0.9f, 0.25f, 0.25f);
            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);        
            hitInfo.material.specularChance = 0.02f;
            hitInfo.material.specularRoughness = 0.0f;
            hitInfo.material.specularColor = vec3(1.0f, 1.0f, 1.0f) * 0.8f;
            hitInfo.material.IOR = ior;
            hitInfo.material.refractionChance = 1.0f;
            hitInfo.material.refractionRoughness = rr;
			hitInfo.material.refractionColor = vec3(1.0f, 2.0f, 3.0f) * absorb;
    	} 
    } 
}

vec3 LessThan(vec3 f, float value)
{
    return vec3(
        (f.x < value) ? 1.0f : 0.0f,
        (f.y < value) ? 1.0f : 0.0f,
        (f.z < value) ? 1.0f : 0.0f);
}

vec3 SRGBToLinear(vec3 rgb)
{
    rgb = clamp(rgb, 0.0f, 1.0f);
     
    return mix(
        pow(((rgb + 0.055f) / 1.055f), vec3(2.4f)),
        rgb / 12.92f,
        LessThan(rgb, 0.04045f)
    );
}

vec3 LinearToSRGB(vec3 rgb)
{
    rgb = clamp(rgb, 0.0f, 1.0f);
     
    return mix(
        pow(rgb, vec3(1.0f / 2.4f)) * 1.055f - 0.055f,
        rgb * 12.92f,
        LessThan(rgb, 0.0031308f)
    );
}
 
vec3 GetColorForRay(in vec3 startRayPos, in vec3 startRayDir, inout uint rngState)
{
    // initialize
    vec3 ret = vec3(0.0f, 0.0f, 0.0f);
    vec3 throughput = vec3(1.0f, 1.0f, 1.0f);
    vec3 rayPos = startRayPos;
    vec3 rayDir = startRayDir;
     
    for (int bounceIndex = 0; bounceIndex <= c_numBounces; ++bounceIndex)
	{
		// shoot a ray out into the world
		SRayHitInfo hitInfo;
		hitInfo.material = GetZeroedMaterial();
		hitInfo.dist = c_superFar;
		hitInfo.fromInside = false;
		TestSceneTrace(rayPos, rayDir, hitInfo);
     
		// if the ray missed, we are done
		if (hitInfo.dist == c_superFar)
		{
			vec3 uvw = rayDir;
			// ktx loads the texture upside down. Should fix this by using the ktx tool changing the orientation, but for now flipping the V here is fine as a quick hack
			uvw.y *= -1.0;
			ret += texture(cubemap, uvw).rgb * throughput;
			break;
		}
     
		// do absorption if we are hitting from inside the object
		if (hitInfo.fromInside)
			throughput *= exp(-hitInfo.material.refractionColor * hitInfo.dist);
     
		// get the pre-fresnel chances
		float specularChance = hitInfo.material.specularChance;
		float refractionChance = hitInfo.material.refractionChance;
     
		// take fresnel into account for specularChance and adjust other chances.
		// specular takes priority.
		// chanceMultiplier makes sure we keep diffuse / refraction ratio the same.
		float rayProbability = 1.0f;
		if (specularChance > 0.0f)
		{
			specularChance = FresnelReflectAmount(
				hitInfo.fromInside ? hitInfo.material.IOR : 1.0,
				!hitInfo.fromInside ? hitInfo.material.IOR : 1.0,
				rayDir, hitInfo.normal, hitInfo.material.specularChance, 1.0f);
         
			float chanceMultiplier = (1.0f - specularChance) / (1.0f - hitInfo.material.specularChance);
			refractionChance *= chanceMultiplier;
		}
     
		// calculate whether we are going to do a diffuse, specular, or refractive ray
		float doSpecular = 0.0f;
		float doRefraction = 0.0f;
		float raySelectRoll = RandomFloat01(rngState);
		if (specularChance > 0.0f && raySelectRoll < specularChance)
		{
			doSpecular = 1.0f;
			rayProbability = specularChance;
		}
		else if (refractionChance > 0.0f && raySelectRoll < specularChance + refractionChance)
		{
			doRefraction = 1.0f;
			rayProbability = refractionChance;
		}
		else
		{
			rayProbability = 1.0f - (specularChance + refractionChance);
		}
     
		// numerical problems can cause rayProbability to become small enough to cause a divide by zero.
		rayProbability = max(rayProbability, 0.001f);
     
		// update the ray position
		if (doRefraction == 1.0f)
		{
			rayPos = (rayPos + rayDir * hitInfo.dist) - hitInfo.normal * c_rayPosNormalNudge;
		}
		else
		{
			rayPos = (rayPos + rayDir * hitInfo.dist) + hitInfo.normal * c_rayPosNormalNudge;
		}
      
		// Calculate a new ray direction.
		// Diffuse uses a normal oriented cosine weighted hemisphere sample.
		// Perfectly smooth specular uses the reflection ray.
		// Rough (glossy) specular lerps from the smooth specular to the rough diffuse by the material roughness squared
		// Squaring the roughness is just a convention to make roughness feel more linear perceptually.
		vec3 diffuseRayDir = normalize(hitInfo.normal + RandomUnitVector(rngState));
     
		vec3 specularRayDir = reflect(rayDir, hitInfo.normal);
		specularRayDir = normalize(mix(specularRayDir, diffuseRayDir, hitInfo.material.specularRoughness*hitInfo.material.specularRoughness));
 
		vec3 refractionRayDir = refract(rayDir, hitInfo.normal, hitInfo.fromInside ? hitInfo.material.IOR : 1.0f / hitInfo.material.IOR);
		refractionRayDir = normalize(mix(refractionRayDir, normalize(-hitInfo.normal + RandomUnitVector(rngState)), hitInfo.material.refractionRoughness*hitInfo.material.refractionRoughness));
             
		rayDir = mix(diffuseRayDir, specularRayDir, doSpecular);
		rayDir = mix(rayDir, refractionRayDir, doRefraction);
     
		// add in emissive lighting
		ret += hitInfo.material.emissive * throughput;
     
		// update the colorMultiplier. refraction doesn't alter the color until we hit the next thing, so we can do light absorption over distance.
		if (doRefraction == 0.0f)
			throughput *= mix(hitInfo.material.albedo, hitInfo.material.specularColor, doSpecular);
     
		// since we chose randomly between diffuse, specular, refract,
		// we need to account for the times we didn't do one or the other.
		throughput /= rayProbability;
     
		// Russian Roulette
		// As the throughput gets smaller, the ray is more likely to get terminated early.
		// Survivors have their value boosted to make up for fewer samples being in the average.
		{
			float p = max(throughput.r, max(throughput.g, throughput.b));
			if (RandomFloat01(rngState) > p)
				break;
 
			// Add the energy we 'lose' by randomly terminating paths
			throughput *= 1.0f / p;            
		}
	}
  
    // return pixel color
    return ret;
}

void main()
{
	int iFrame = ubo.numFrameTest; // TODO: pass frame!

	// initialize a random number state based on frag coord and frame
	uint rngState = uint(uint(gl_GlobalInvocationID.x) * uint(1973) + uint(gl_GlobalInvocationID.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);


	vec2 resolution = ubo.resolution;

	// The ray starts at the camera position (the origin)
    vec3 rayPosition = vec3(0.0f, 0.0f, 0.0f);

	// calculate subpixel camera jitter for anti aliasing
	vec2 jitter = vec2(RandomFloat01(rngState), RandomFloat01(rngState)) - 0.5f;
     
    // calculate coordinates of the ray target on the imaginary pixel plane.
    // -1 to +1 on x,y axis. 1 unit away on the z axis
    vec3 rayTarget = vec3(((gl_GlobalInvocationID.xy+jitter)/resolution) * 2.0f - 1.0f, 1.0f);

	// correct for aspect ratio
    float aspectRatio = resolution.x / resolution.y;
    rayTarget.y /= aspectRatio;
	// Vulkan: invert the y
	rayTarget.y = -rayTarget.y;
     
    // calculate a normalized vector for the ray direction.
    // it's pointing from the ray position to the ray target.
    vec3 rayDir = normalize(rayTarget - rayPosition);
     
    // raytrace for this pixel

	int c_numRendersPerFrame = 50;
	vec3 color = vec3(0);
	for (int index = 0; index < c_numRendersPerFrame; ++index)
    	color += GetColorForRay(rayPosition, rayDir, rngState) / float(c_numRendersPerFrame);
 
    // read the last frame and average with the current
    vec3 lastFrameColor = imageLoad(outputImage, ivec2(gl_GlobalInvocationID.xy)).rgb;
    color = mix(lastFrameColor, color, 1.0f / float(iFrame+1));
	
	imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0f));
}
